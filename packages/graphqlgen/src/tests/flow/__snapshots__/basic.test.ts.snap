// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic schema 1`] = `
"/* @flow */
// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import type { GraphQLResolveInfo } from \\"graphql\\";
import type { Number } from \\"../../fixtures/basic/types-flow\\";
type Context = any;

// Types for Query
export const Query_defaultResolvers = {};

export interface Query_Args_Custom_with_arg {
  id: number;
}

export interface Query_Args_Custom_with_custom_arg {
  id: Number;
}

export interface Query_Args_Scalar_with_arg {
  id: number;
}

export interface Query_Args_Scalar_with_custom_arg {
  id: Number;
}

export type Query_Id_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Query_Custom_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Number | Promise<Number>;

export type Query_Custom_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Number | null | Promise<Number | null>;

export type Query_Custom_array_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Number[] | null | Promise<Number[] | null>;

export type Query_Custom_array_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Number[] | Promise<Number[]>;

export type Query_Custom_with_arg_Resolver = (
  parent: {},
  args: Query_Args_Custom_with_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => Number | Promise<Number>;

export type Query_Custom_with_custom_arg_Resolver = (
  parent: {},
  args: Query_Args_Custom_with_custom_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => Number | Promise<Number>;

export type Query_Scalar_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Query_Scalar_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | null | Promise<boolean | null>;

export type Query_Scalar_array_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean[] | null | Promise<boolean[] | null>;

export type Query_Scalar_array_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean[] | Promise<boolean[]>;

export type Query_Scalar_with_arg_Resolver = (
  parent: {},
  args: Query_Args_Scalar_with_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Query_Scalar_with_custom_arg_Resolver = (
  parent: {},
  args: Query_Args_Scalar_with_custom_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export interface Query_Resolvers {
  id: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  custom_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;

  custom_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | null | Promise<Number | null>;

  custom_array_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number[] | null | Promise<Number[] | null>;

  custom_array_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number[] | Promise<Number[]>;

  custom_with_arg: (
    parent: {},
    args: Query_Args_Custom_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;

  custom_with_custom_arg: (
    parent: {},
    args: Query_Args_Custom_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;

  scalar_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  scalar_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  scalar_array_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean[] | null | Promise<boolean[] | null>;

  scalar_array_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean[] | Promise<boolean[]>;

  scalar_with_arg: (
    parent: {},
    args: Query_Args_Scalar_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  scalar_with_custom_arg: (
    parent: {},
    args: Query_Args_Scalar_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
}

// Types for Number
export const Number_defaultResolvers = {
  id: (parent: Number) => parent.id,
  value: (parent: Number) => parent.value
};

export type Number_Id_Resolver = (
  parent: Number,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | null | Promise<string | null>;

export type Number_Value_Resolver = (
  parent: Number,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | null | Promise<number | null>;

export interface Number_Resolvers {
  id: (
    parent: Number,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  value: (
    parent: Number,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;
}

export interface Resolvers {
  Query: Query_Resolvers;
  Number: Number_Resolvers;
}
"
`;

exports[`basic schema 2`] = `
Array [
  Object {
    "code": "/* @flow */
import { Number_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { Number_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Number: Number_Resolvers = {
  ...Number_defaultResolvers
};
",
    "force": false,
    "path": "Number.js",
  },
  Object {
    "code": "/* @flow */
import type { Query_Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: Query_Resolvers = {
  id: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_required: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_nullable: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_array_nullable: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_array_required: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_arg: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_custom_arg: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_required: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_nullable: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_array_nullable: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_array_required: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_with_arg: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_with_custom_arg: (parent, args, ctx, info) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.js",
  },
  Object {
    "code": "// @flow
// This resolver file was scaffolded by github.com/prisma/graphqlgen, DO NOT EDIT.
// Please do not import this file directly but copy & paste to your application code.

import type { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { Number } from \\"./Number\\";

export const resolvers: Resolvers = {
  Query,
  Number
};
",
    "force": false,
    "path": "index.js",
  },
]
`;
